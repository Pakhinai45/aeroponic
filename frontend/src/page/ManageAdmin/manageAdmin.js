import React, { useState, useEffect } from "react";
import Sidebar from "../../components/sidebar/Sidebar";
import axios from "axios";
import "./manageAdmin.css";

function ManageAdmin() {
  const [users, setUsers] = useState([]);
  const [filteredUsers, setFilteredUsers] = useState([]); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [selectedUser, setSelectedUser] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [modalVisible, setModalVisible] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á modal
  const [modalCreateUser, setmodalCreateUser] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á modal

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fetchUsers = async () => {
    try {
      const response = await axios.get("http://localhost:3300/api/users/getUser");
      if (response.data.success) {
        setUsers(response.data.users);
        setFilteredUsers(response.data.users); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      } else {
        console.error("Error fetching users:", response.data.message);
      }
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° status
  const filterUsersByStatus = (status) => {
    if (status === null) {
      setFilteredUsers(users); // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    } else {
      setFilteredUsers(users.filter((user) => user.status === status)); // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° status
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const openEditModal = (user) => {
    setSelectedUser(user); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    setModalVisible(true); // ‡πÄ‡∏õ‡∏¥‡∏î modal
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î modal
  const closeEditModal = () => {
    setModalVisible(false);
    setSelectedUser(null);
  };

  // ‡∏õ‡∏¥‡∏î modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  const closeAddModal = () => {
    setmodalCreateUser(false);
    setSelectedUser(null);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const handleSaveChanges = async () => {
    if (!selectedUser || !selectedUser.id) {
      alert("User ID is missing");
      return;
    }

    try {
      const response = await axios.put(
        `http://localhost:3300/api/users/updateUser/${selectedUser.id}`, // ‡πÉ‡∏ä‡πâ id ‡∏à‡∏≤‡∏Å selectedUser ‡πÉ‡∏ô URL
        selectedUser // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏õ
      );
      alert(response.data.message);

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
      fetchUsers();

      closeEditModal(); // ‡∏õ‡∏¥‡∏î modal
    } catch (error) {
      console.error("Error updating user:", error);
    }
  };

  const deleteUser = async (userId) => {
    if (!window.confirm("Are you sure you want to delete this user?")) return;

    try {
      const response = await axios.delete(
        `http://localhost:3300/api/users/deleteUser/${userId}`
      );
      alert(response.data.message);

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö
      fetchUsers();
    } catch (error) {
      console.error("Error deleting user:", error);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà
  const openAddModal = () => {
    setSelectedUser({
      name: "",
      email: "",
      phon: "",
      password: "", // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå password
      status: 0, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      tokenline: "",
    });
    setmodalCreateUser(true);
  };

  const handleCreateUser = async () => {
    const { name, email, password, phon, status, tokenline } = selectedUser;

    if (!name || !email || !phon || !password ) {
      alert("Please fill in all required fields.");
      return;
    }

    try {
      const response = await axios.post("http://localhost:3300/api/users/signUpByRoot", {
        name: name,
        phon: phon,
        email: email,
        password: password, 
        status: status,
        tokenline: tokenline,
      });

      alert(response.data.message);

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
      fetchUsers();

      closeAddModal();
    } catch (error) {
      console.error("Error creating user:", error);
      alert(error.response?.data?.message || "Failed to create user.");
    }
  };

  return (
    <div className="grid-manageAdmin">
      <div className="sidebar-container">
        <Sidebar />
      </div>
      <div className="content-manageAdmin">
        {/* <div className="navbar">
          <Navbar />
        </div> */}

        <div className="manage-admin">
          <h1>Manage Users</h1>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á */}
          <div className="filter-buttons">
            <button onClick={() => filterUsersByStatus(null)}>All Users</button>
            <button onClick={() => filterUsersByStatus(0)}>General</button>
            <button onClick={() => filterUsersByStatus(1)}>Admin</button>
            <button onClick={() => filterUsersByStatus(2)}>Root Admin</button>
          </div>

          <div className="users-list">
            <div
              className="user-card add-user-card"
              onClick={() => openAddModal()}
            >
              <p className="add-icon">‚ûï</p>
              <p>Add New User</p>
            </div>

            {filteredUsers.length === 0 ? (
              <p className="no-users">No users available</p>
            ) : (
              filteredUsers.map((user, index) => (
                <div key={index} className="user-card">
                  {/* ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏õ‡∏≤‡∏Å‡∏Å‡∏≤ */}
                  <button
                    className="edit-icon"
                    onClick={() => openEditModal(user)}
                  >
                    ‚úèÔ∏è
                  </button>
                  <button
                    className="edit-icon"
                    onClick={() => deleteUser(user.id)}
                  >
                    üóëÔ∏è
                  </button>
                  <p>
                    <strong>Name:</strong> {user.name}
                  </p>
                  <p>
                    <strong>Email:</strong> {user.email}
                  </p>
                  <p>
                    <strong>Phone:</strong> {user.phon}
                  </p>
                  <p>
                    <strong>Status:</strong> {user.status}
                  </p>
                  <p>
                    <strong>TokenLine:</strong> {user.tokenline}
                  </p>
                </div>
              ))
            )}
          </div>
        </div>
      </div>

      {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      {modalVisible && !modalCreateUser && selectedUser && (
        <div className="modal">
          <div className="modal-content">
            <h2>Edit User Information</h2>
            <label>Name</label>
            <input
              type="text"
              value={selectedUser.name}
              onChange={(e) =>
                setSelectedUser({ ...selectedUser, name: e.target.value })
              }
            />
            <label>Email</label>
            <input
              type="text"
              value={selectedUser.email}
              onChange={(e) =>
                setSelectedUser({ ...selectedUser, email: e.target.value })
              }
            />
            <label>Phone:</label>
            <input
              type="text"
              value={selectedUser.phon}
              onChange={(e) =>
                setSelectedUser({ ...selectedUser, phon: e.target.value })
              }
            />
            <label>Status</label>
            <input
              type="number"
              value={selectedUser.status}
              onChange={(e) => {
                const newValue = Math.min(
                  Math.max(Number(e.target.value), 0),
                  2
                );
                setSelectedUser({ ...selectedUser, status: newValue });
              }}
            />
            <label>TokenLine</label>
            <input
              type="text"
              value={selectedUser.tokenline}
              onChange={(e) =>
                setSelectedUser({ ...selectedUser, tokenline: e.target.value })
              }
            />

            <div className="modal-actions">
              <button onClick={handleSaveChanges}>Save Changes</button>
              <button onClick={closeEditModal}>Cancel</button>
            </div>
          </div>
        </div>
      )}

      {/* Modal ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ */}
      {modalCreateUser && !modalVisible && selectedUser && (
        <div className="modal">
          <div className="modal-content">
            <h2>Create New User</h2> {/* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô */}
            <label>Name</label>
            <input
              type="text"
              value={selectedUser.name}
              onChange={(e) =>
                setSelectedUser({ ...selectedUser, name: e.target.value })
              }
            />
            <label>Email</label>
            <input
              type="text"
              value={selectedUser.email}
              onChange={(e) =>
                setSelectedUser({ ...selectedUser, email: e.target.value })
              }
            />
            <label>Password</label>
            <input
              type="password"
              value={selectedUser.password}
              onChange={(e) =>
                setSelectedUser({ ...selectedUser, password: e.target.value })
              }
            />
            <label>Phone:</label>
            <input
              type="text"
              value={selectedUser.phon}
              onChange={(e) =>
                setSelectedUser({ ...selectedUser, phon: e.target.value })
              }
            />
            <label>Status</label>
            <input
              type="number"
              value={selectedUser.status}
              onChange={(e) => {
                const newValue = Math.min(
                  Math.max(Number(e.target.value), 0),
                  2
                );
                setSelectedUser({ ...selectedUser, status: newValue });
              }}
            />
            <label>TokenLine</label>
            <input
              type="text"
              value={selectedUser.tokenline}
              onChange={(e) =>
                setSelectedUser({ ...selectedUser, tokenline: e.target.value })
              }
            />

            <div className="modal-actions">
              <button onClick={handleCreateUser}>Create User</button> {/* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏° */}
              <button onClick={closeAddModal}>Cancel</button> {/* ‡∏õ‡∏¥‡∏î modal ‡∏™‡∏£‡πâ‡∏≤‡∏á */}
            </div>
          </div>
        </div>
      )}

    </div>
  );
}

export default ManageAdmin;
